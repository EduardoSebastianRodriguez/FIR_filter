------------------------------------------------------------------------
Hi all!!

You are reading the howto of a module which implements
digital real-time FIR filters in C++. A demo is also provided to show the 
operation of the module in a simulated real-time filtering of a ECG.

-------------------------------------------------------------------------

The steps for using the library are the followings:

	1)Download the folder.
	2)Include the file 'FIR.h' in the directory of working or in the 
	  directory of the libraries of your OS (for Linux: /usr/include).
	3)Use the well-known ---> #include <FIR.h>
	4)Enjoy the library.

For running the demo:
	
	1)The demo file is 'DEMO.cpp'.
	2.1)Use your developing environment to compile and execute the demo.
	2.2)Use the terminal of Linux: 

				$ g++ -std=gnu++11  DEMO.cpp -o DEMO   
				$ ./DEMO

	2.3)Use your habitual developer command prompt.
	3)The input file is 'ecg.dat' and the output file is 'ecg_filtered.dat'.
	4)Use your favorite program for opening the data files and plotting the 
	  result:the folder 'Python plotting codes and figures stores'stores 
	  four sripts which plot:

		*   'ecg.py'                 ---->  'ecg.pdf', the recorded ECG
		*   'zoomed_ecg.py'          ---->  'zoomed_ecg.pdf', a zoomed heartbeat
		*   'ecg_filtered.py'	     ---->  'ecg_filtered.pdf', the filtered ECG
		*   'zoomed_ecg_filtered.py' ---->  'zoomed_ecg_filtered.pdf', a zoomed 
						     filtered heartbeat to better see the
						     result of the filtering
	
-----------------------------------------------------------------------------

The FIR library described in this document consists in a FIR class which, by 
providing the number of coefficients, the cut-off frequency/ies, and the type
of the filter:
	
	*Low pass
	*High pass
	*Stop band
	*Pass band

The FIR filter works as a real-time system, so that it only recieves one single 
scalar value as input (double) and return a single scalar value as output (double).
The steps for using the clas are the followings:

	1)Generate an instance of the class FIR, providing the number of taps as 
	  the input of the constructor:
			
			FIR.filter(500);//The argument must be an integer over 0

	2)Select the type of filter you want to use:

			*Low pass  -----> filter.lowpass(double f);//The argument is the cut-off frequency
			*High pass -----> filter.highpass(double f);//The argument is the cut-off frequency
			*Stop band -----> filter.stopband(double {f1,f2});//The argument is the cut-off frequencies
			*Pass band -----> filter.passband(double {f1,f2});//The argument is the cut-off frequencies

	  These methods generate the coefficients of the filter, so that the user has access to their 
	  values by the method 'filter.getCoeff(int i);', which returns a double.
	  
	  IMPORTANT!!: the cut-off frequencies must be normalized to Nyquist,e.i., they must 
		       between 0 and 0.5

	3)Filter the input real value:

			filter.filter(double input);//Returns a real value as output (double)

	4)And that is all!!!

-------------------------------------------------------------------------------------------------------------------


The methods available for the user are (compendium):

	int    getTaps();		  //Gets the number of taps of the filter
	double getCoeff(int i);	          //Gets the coefficient of index i
	char   getType();		  //Gets the type of the filter
	double getFreq(int i);		  //Gets the cut-off frequency i: if the filter is first order, i=0
	double getBuffer(int i);	  //Gets the buffered value of index i
	void   setTaps(int M);            //Sets the number of taps of the filter
	void   setCoeff(double x, int i); //Sets the coefficient of the position i with the value x
	void   setType(char a);		  //Sets the type of the filter
	void   setFreq(double x, int i);  //Sets the cut-off frequency of index i: if the filter is first order, i=0
	void   setBuffer(double x, int i);//Sets the value of index i of the buffer to x
	void   lowpass(double f);	  //Generates the coefficients of a low pass filter with cut-off frequency freq
	void   highpass(double f);        //Generates the coefficients of a high pass filter with cut-off frequency freq
	void   stopband(double f[2]);     //Generates the coefficients of a stop band filter with cut-off frequencies freqs
	void   passband(double f[2]);     //Generates the coefficients of a pass band filter with cut-off frequencies freqs
	double filter(double x);	  //Filters the scalar input x by using the coefficients of the filter and returns a scalar output
					  //If no coefficient generator method is applied, the coefficients are all zero.

------------------------------------------------------------------------------------------------------------------

HAVE A NICE DAY!

Eduardo


			
